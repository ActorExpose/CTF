#include <iostream>
#include <string>
#include <vector>
#include "sha3.h"

#define APPEND_LEN 10
#define NONCE_MAX_LEN 1000


std::string HashSolve(int difficulty, std::string nonce);


int main(int argc, char *argv[])
{
	if (argc != 3)
		return 0;

	int difficulty = std::stoi(std::string{ argv[1] });
	std::string nonce{ argv[2] };

	std::cout << HashSolve(difficulty, nonce) << std::endl;

	return 0;
}

std::string HashSolve(int difficulty, std::string nonce)
{
    static const std::vector<char> charset{ '0','1','2','3','4','5','6','7','8','9',
        'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
        'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'
    };

    char md[32], data[APPEND_LEN + NONCE_MAX_LEN];

    if (nonce.length() > NONCE_MAX_LEN)
        return "";

    memset(data, charset[0], APPEND_LEN);
    memcpy(data + APPEND_LEN, nonce.c_str(), nonce.length());
    int total_length = APPEND_LEN + (int)nonce.length();

    std::vector<int> trying(APPEND_LEN, 0);
    trying[0]--;

    while (true)
    {
        int idx = 0;
        trying[idx]++;
        for (; idx < APPEND_LEN - 1 && trying[idx] == charset.size(); )
        {
            data[idx] = charset[trying[idx] = 0];
            trying[++idx]++;
        }
        if (idx == APPEND_LEN - 1 && trying[idx] == charset.size())
            break;
        data[idx] = charset[trying[idx]];

        sha3(data, total_length, md, 32);

        int diff;
        bool fail = false;
        for (diff = 0; diff < difficulty - 8; diff += 8)
        {
            int byte_idx = diff / 8;
            
            if (md[byte_idx])
            {
                fail = true;
                break;
            }
        }
        if (fail)
            continue;

        for ( ; diff < difficulty; diff++)
        {
            int byte_idx = diff / 8;
            int bit_idx = 7 - diff % 8;

            if (md[byte_idx] & (1 << bit_idx))
            {
                fail = true;
                break;
            }
        }
        if (fail)
            continue;

        return std::string{ data, APPEND_LEN };
    }

    return "";
}