import itertools
import random
from decimal import Decimal
from operator import mul
from functools import reduce
def prime_factors(n):
  for i in itertools.chain([2], itertools.count(3, 2)):
    if n <= 1:
      break
    while n % i == 0:
      n //= i
      yield i
n = 10334465434588059156093965538297516550622260041682062823432902469783188597914276568552700194849877929894375950252570477080418352732597658745665925604704669227133726477243854317836635130694123893711638533001980496229875665476598568821806170303765540489814402234159901540440432134155844542962445153646330595588291605924429211352279943471372817279938720974895260387784578239150931816946786416232516666251965421919651838044618050991294403546958930745419743836966520198735201123255884089263272829846640538826979843642885775791641575109178753509580001660392092396798648924375401024147883702298145910046889402880394195369984000000000000000000000000000000000000000000000000000000000000000000000000000000000
sn = 3214726338988757399964463840205273148284735043324463579894976679845078166928105412104944973948893914339037572694382785661727648297539107767478128297633669341356440278480314502443731079340424764653103468238563073341496690901434197268615240607985890327844073738551115260849983966971570699838147501655616953786428037017304945538845583678438817092853062
START = 3214726405224085428773727063901693276192693372462496017194969075440081941352022948732844505675142766364324386405818870427378212829227896996331199973217592030814687793713205760906020644428281421073310315376276597993504932859411582712785429888184263714793053698331029584164332958730192198868320585941741857669120000000000000000000000000000000000000000
cnt = 0
l = [x for x in prime_factors(n)]
selected = [x for x in prime_factors(START)]
for se in selected:
    l.remove(se)
not_selected = l
print(selected)
print(not_selected)
best = Decimal(abs(reduce(mul, selected, 1) - sn)) / sn
while(best >= 1e-8):
  i = random.sample(set(selected + [1]*9), 10)
  #i = random.sample(selected + [1]*9, 10)
  j = random.sample(set(not_selected + [1]*9).difference(set(i)), 10)
  #j = random.sample(not_selected + [1]*9, 10)
  k = reduce(mul, selected, 1)
  val = k//reduce(mul, i, 1)*reduce(mul, j, 1)
  can = Decimal(abs(val - sn)) / sn
  if best > can:
    best = can
    print(best)
    print(val)
    print(i, j)
    for ie in i:
      if ie != 1:
        selected.remove(ie)
        not_selected.append(ie)
    for je in j:
      if je != 1:
        selected.append(je)
        not_selected.remove(je)